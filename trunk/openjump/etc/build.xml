<?xml version="1.0"?>
<!--  ======================================================================= 
      OpenJUMP build file. Based on the HttpUnit build file.                                                    

      OpenJUMP Release Procedure:
       - Update PDF documents (especially version history)
       - Update CVS sandbox
       - Commit CVS sandbox
       - Change version in build.xml
       - Run ant clean,dist-zip
       - Tag CVS repository with the version number
      ======================================================================= -->
<project name="openjump" default="dist-zip" basedir="..">
        <property name="name" value="openjump"/>
        <property name="Name" value="OpenJUMP"/>
        <property name="version" value="20050728"/>
        <!-- The recommended setting for debug is "on", so that line numbers are included in stack traces. [Jon Aquino 2005-04-06] -->
        <property name="debug" value="on"/>
        <property name="deprecation" value="off"/>
        <property name="optimize" value="off"/>
        <property name="src.dir" value="src"/>
        <property name="lib.dir" value="lib"/>
        <property name="scripts.dir" value="scripts"/>
        <property name="docs.dir" value="doc"/>
        <property name="build.dir" value="build"/>
        <property name="build.classes" value="${build.dir}/classes"/>
        <property name="javadoc.dir" value="${build.dir}/javadoc"/>
        <property name="workbench.jar" value="${build.dir}/jump-workbench-${version}.jar"/>
        <property name="api.jar" value="${build.dir}/jump-api-${version}.jar"/>
        <property name="dist.dir" value="dist"/>
        <property name="archive.dir" value="${dist.dir}/${name}-${version}"/>
        <property name="archive.src.dir" value="${dist.dir}/${name}-src-${version}"/>
        <property name="classpath" value=""/>
        <selector id="resource.selector">
                <and>
                        <or>
                                <filename name="**/*.properties" casesensitive="no"/>
                                <filename name="**/*.png" casesensitive="no"/>
                                <filename name="**/*.gif" casesensitive="no"/>
                                <filename name="**/*.java2xml" casesensitive="no"/>
                                <filename name="**/*.html" casesensitive="no"/>
                                <filename name="**/*.xml" casesensitive="no"/>
                                <filename name="**/*.txt" casesensitive="no"/>
                                <filename name="**/*.jpg" casesensitive="no"/>
	                        	<filename name="**/*.xsl" casesensitive="no"/>
                        </or>
                        <not>
                                <filename name="**/overview.html" casesensitive="no"/>
                        </not>
                        <not>
                                <filename name="**/package.html" casesensitive="no"/>
                        </not>
                </and>
        </selector>
        <selector id="api.jar.selector">
                <and>
                        <or>
                                <filename name="**/*.class" casesensitive="no"/>
                                <selector refid="resource.selector"/>
                        </or>
                        <or>
                                <filename name="com/**" casesensitive="no"/>
                                <filename name="org/**" casesensitive="no"/>
                                <filename name="de/**" casesensitive="no"/>                        	
                        </or>
                        <not>
                                <or>
                                        <filename name="com/vividsolutions/jump/workbench/**" casesensitive="no"/>
                                        <filename name="com/vividsolutions/jump/demo/**" casesensitive="no"/>
                                </or>
                        </not>
                </and>
        </selector>
        <selector id="workbench.jar.selector">
                <and>
                        <or>
                                <filename name="**/*.class" casesensitive="no"/>
                                <selector refid="resource.selector"/>
                        </or>
                        <or>
                                <filename name="com/vividsolutions/jump/workbench/**" casesensitive="no"/>
                                <filename name="com/vividsolutions/jump/demo/**" casesensitive="no"/>
                                <filename name="language/**" casesensitive="no"/>
                        </or>
                </and>
        </selector>
        <selector id="archive.src.selector">
                <and>
                        <or>
                                <filename name="**/*.java" casesensitive="no"/>
                                <selector refid="resource.selector"/>
                        </or>
                        <or>
                                <filename name="com/**" casesensitive="no"/>
                                <filename name="org/**" casesensitive="no"/>
                                <filename name="de/**" casesensitive="no"/>                        	
                        </or>
                </and>
        </selector>     
        <!-- =================================================================== -->
        <!-- Defines the classpath used for compilation and test.                -->
        <!-- =================================================================== -->
        <path id="base.classpath">
                <fileset dir="${lib.dir}">
                        <include name="**/*.jar"/>
                </fileset>
        </path>
        <!--  ===================================================================  -->
        <!--  Prepares the build directory                                         -->
        <!--  ===================================================================  -->
        <target name="prepare">
                <tstamp/>
                <mkdir dir="${build.dir}"/>
        </target>
        <!--  ===================================================================  -->
        <!--  Compiles the source code                                             -->
        <!--  ===================================================================  -->
        <target name="compile" depends="prepare">
                <mkdir dir="${build.classes}"/>
                <javac srcdir="${src.dir}" destdir="${build.classes}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}">
                        <classpath refid="base.classpath"/>
                </javac>
                <copy todir="${build.classes}">
                        <fileset dir="${src.dir}" excludes="**/*.java,**/*.class"/>
                </copy>
        </target>
	    <!--  ===================================================================  -->
    	<!--  create the manifest file  	[sstein: added 10. Aug 2006] 		   --> 
	    <!--  ===================================================================  -->
 		<!-- property name="distpathprop" refid="distpath"/-->		
	 	<property name="distpathprop" value="build"/>	
	   	<manifest file="${build.dir}/MANIFEST.MF">
			<attribute name="Class-Path" value="${distpathprop}" />
     		<attribute name="Main-Class" value=" com.vividsolutions.jump.workbench.JUMPWorkbench"/>
   		</manifest>
	    <!-- eliminate absolute paths from manifest file -->
    	<replaceregexp file="${build.dir}/MANIFEST.MF" match=":\\" replace="" flags="gs"/>
	    <replaceregexp file="${build.dir}/MANIFEST.MF" match=":[^:;]*lib" replace=": lib" flags="gs"/>     
    	<replaceregexp file="${build.dir}/MANIFEST.MF" match=";[^:;]*lib" replace=" lib" flags="gs"/>      
        <!--  ===================================================================  -->
        <!--  Creates the jar archive                                              -->
        <!--  ===================================================================  -->
        <target name="jar" depends="compile">
            <echo file="${build.dir}/info.txt">Manifest-Version: 1.0
				Sealed: false
				${Name}-Version: ${version}
				Build-Date: ${TODAY}
				Build-Time: ${TSTAMP}
			</echo>
	        	<!-- [sstein] use other manifest -->
                <!-- jar jarfile="${workbench.jar}" manifest="${build.dir}/info.txt"-->
                <jar jarfile="${workbench.jar}" manifest="${build.dir}/MANIFEST.MF">                	
                        <fileset dir="${build.classes}">
                                <selector refid="workbench.jar.selector"/>
                        </fileset>
                </jar>
   	        	<!-- [sstein] use other manifest -->        	
                <!-- jar jarfile="${api.jar}" manifest="${build.dir}/info.txt"-->
                <jar jarfile="${api.jar}" manifest="${build.dir}/MANIFEST.MF">                	
                        <fileset dir="${build.classes}">
                                <selector refid="api.jar.selector"/>
                        </fileset>
                </jar>
        </target>
        <!--  ===================================================================  -->
        <!--  Creates the API documentation                                        -->
        <!--  ===================================================================  -->
        <target name="javadocs" depends="prepare">
                <mkdir dir="${javadoc.dir}"/>
                <javadoc destdir="${javadoc.dir}" use="true">
                        <classpath refid="base.classpath"/>
                        <packageset dir="${src.dir}">
                                <include name="com/vividsolutions/**"/>
                        </packageset>
                </javadoc>
        </target>
        <!--  ===================================================================  -->
        <!--  Creates the distribution                                             -->
        <!--  ===================================================================  -->
        <target name="dist" depends="jar,javadocs">
                <mkdir dir="${archive.dir}"/>
                <copy todir="${archive.dir}/bin">
                        <fileset dir="${scripts.dir}"/>
                        <filterset>
                                <filter token="VERSION" value="${version}"/>
                        </filterset>
                </copy>
                <copy file="etc/log4j.xml" todir="${archive.dir}/bin"/>
                <copy todir="${archive.dir}">
                        <fileset dir=".">
                                <include name="${lib.dir}/**"/>
                                <exclude name="**/junit.jar"/>
                                <include name="${docs.dir}/**"/>
                        </fileset>
                </copy>
                <copy file="${workbench.jar}" todir="${archive.dir}/lib"/>
                <copy file="${api.jar}" todir="${archive.dir}/lib"/>
                <mkdir dir="${archive.src.dir}"/>
                <copy todir="${archive.src.dir}/javadoc">
                        <fileset dir="${javadoc.dir}"/>                	
                </copy>
                <copy todir="${archive.src.dir}/src">
                        <fileset dir="${src.dir}">
                                <selector refid="archive.src.selector"/>
                        </fileset>
                </copy>
        		<!-- [sstein] added begin : copy also all other stuff to src-->
            	<copy todir="${archive.src.dir}/src">
                        <fileset dir=".">
                                <include name="${lib.dir}/**"/>
                                <exclude name="**/junit.jar"/>
                                <include name="${docs.dir}/**"/>
                        </fileset>
                </copy>
    			<!-- [sstein] added end -->        	        	
        </target>
        <!--  ===================================================================  -->
        <!--  Packages the distribution with ZIP                                   -->
        <!--  ===================================================================  -->
        <target name="dist-zip" depends="dist">
                <zip zipfile="${dist.dir}/${name}-${version}.zip" basedir="${dist.dir}" includes="${name}-${version}/**"/>
                <zip zipfile="${dist.dir}/${name}-src-${version}.zip" basedir="${dist.dir}" includes="${name}-src-${version}/**"/>
        </target>
        <!--  ===================================================================  -->
        <!--  Cleans up generated stuff                                            -->
        <!--  ===================================================================  -->
        <target name="clean">
                <delete dir="${build.dir}"/>
                <delete dir="${dist.dir}"/>
        </target>
</project>
